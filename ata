#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::Util qw/trim/;
use Mojo::File qw/path/;
use v5.20;
use FindBin;
use FreezeThaw qw(freeze thaw);
use experimental 'signatures';

use lib path(__FILE__)->dirname . "/lib";
use Atat::Objects;

# In memory storage of everything
my %buckets;   # bucket->id => bucket
my %users;     # user->id   => user
my %roles;     # role->name => role

# Set to 1 to persist data between server restarts.
my $PERSIST = $ENV{ATA_PERSIST};
my $SAVE_FILE = 'ata-objects.frozen';
if ($PERSIST and -e $SAVE_FILE) {
   my ($u,$r,$b) = thaw( path($SAVE_FILE)->slurp );
   %buckets = %$b;
   %users = %$u;
   %roles = %$r;
}

if ($PERSIST) {
    app->hook(after_render => sub {
        path($SAVE_FILE)->spurt( freeze( \%users, \%roles, \%buckets ) );
    });
}

plugin AssetPack => {
    pipes => [qw/Sass Css Combine/]
};

app->asset->process(
  'ata.css' => (
    "https://www.w3schools.com/w3css/4/w3.css",
    "https://fonts.googleapis.com/css?family=Raleway",
"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css",
    "scss/skel.scss",
  )
);

my @pages = qw/
  login
  select_bucket
  create_bucket
  create_user
  manage_roles
  enter_loa
  access_cloud
  reconcile
  reports
  logout
  /;

my @permissions = grep { $_ !~ /log(in|out)/ } @pages;

my %labels = (
  login        => 'Login',
  create_user  => "Add a new AT-AT user",
  manage_roles => 'Manage roles',
  select_bucket  => 'Select funding pool',
  create_bucket  => 'Create funding pool',
  enter_loa    => 'Add an LOA',
  access_cloud => 'Access the cloud!',
  reconcile    => 'Reconcile invoices',
  reports      => 'Run reports',
  logout       => 'Logout'
);

app->defaults(pages => \@pages, labels => \%labels, layout => 'default',);

# Permissions are based on bucket + role.

$roles{bucket_creator} //= UserRole->new(
    name        => 'bucket_creator',
    permissions => {
      create_bucket => 1,
      manage_roles  => 1,
      select_bucket => 1,
      create_user   => 1,
    },
  );

app->helper(
  permissions => sub($c) {
    @permissions
  }
);

app->helper( roles => sub($c) { sort keys %roles } );

app->helper(user => sub($c) {
    return undef unless $c->session('user');
    $users{ $c->session('user') };
});

app->helper(
  bucket => sub($c) {
    my $id = $c->session('bucket') or return '';
    return $buckets{$id} if exists($buckets{$id});
    $c->session('bucket', '');
    return '';
  }
);

app->helper(
  users => sub($c) {
    sort { $a->username cmp $b->username} values %users;
  }
);

app->helper(
  user_roles => sub($c) {
    sort { $a->name cmp $b->name } (
        values %roles,
        @{ $c->user->roles }
    );
  }
);

app->helper(
  permissions => sub($c) {
    (grep { $_ !~ /^(login|logout)$/ } @pages)
  }
);

# Check perms for a user
app->helper(
  check_perms => sub ($c, $user, $perm) {

    # Unchangeable
    for ($perm) {
      /login/  and return 1;
      /logout/ and return 1;
    }

    # No user?  No perms.
    return 0 unless $user;

    # No bucket?
    my $bucket = $c->bucket or do {
      for ($perm) {
        /create_bucket/ and return 1;
        /select_bucket/ and return 1;
      }
      return 0;
    };

    # Bucket and a user.
    return $user->has_permission($bucket, $perm);
  }
);

# Check perms for the logged in user.
app->helper(
  user_can => sub ($c, $perm) {
    return $c->check_perms($c->user, $perm);
  }
);

app->helper(
  users_buckets => sub($c) {
    return grep { $_->user_can($c->user, 'select_bucket') } values %buckets;
  }
);

app->helper(
  find_role => sub($c,$role) {
    return $roles{ $role };
  }
);

app->helper(
  add_bucket => sub ($c, $bucket) {
    my $id = $bucket->id;
    $buckets{$id}                         = $bucket;
    $bucket->add_grant( $c->user, $c->find_role('bucket_creator') );
  }
);

app->helper(
  select_bucket => sub ($c, $id) {
    $c->app->log->debug("Switching to bucket " . $c->dumper($b));
    $c->session(bucket => $id);
  }
);

app->helper(
  error => sub ($c, $msg) {
    $c->flash(msg => $msg);
    $c->redirect_to($c->current_route);
  }
);

app->helper(
  unauthorized => sub($c) {
    $c->render(status => 403, inline => <<DONE );
unauthorized
<br>
%= link_to 'home' => 'dashboard'
DONE
  }
);

# Public routes
get '/' => sub($c) {
  $c->render;
} => 'dashboard';

get '/login';
get '/logout' => sub($c) {
  $c->session(user    => '');
  $c->session(bucket  => '');
  $c->session(expires => 1);
};


post '/login' => sub($c) {
  unless ($c->req->param('username')) {
    $c->flash(msg => 'missing username');
    return $c->redirect_to('login');
  }
  my $name = $c->req->param('username');
  $users{ $name } ||= User->new(username => $name);
  $c->session('user', $name);
  $c->redirect_to('login');
};

# Private routes
under sub($c) {
  my $user = $c->user or return $c->unauthorized;
  my $role = $c->current_route;
  $c->app->log->debug("checking auth for @{[ $user->username ]} to perform $role");
  return $c->unauthorized unless $c->user_can($role);
  1;
};

get '/select_bucket' => sub($c) {
  $c->select_bucket($c->param('bucket')) if $c->param('bucket');
};
get '/create_user';
get '/create_bucket';
get '/enter_loa';
get '/access_cloud';
get '/reconcile';
get '/reports';
get '/manage_roles';

post '/manage_roles' => sub($c) {
  # 1. permissions
  my $user = $c->user->username;
  for my $role (values %roles) {
    for my $perm ($c->permissions) {
        $role->permissions->{$perm} = !!$c->param( $role->slug . '_' . $perm );
    }
  }
  if (my $new = $c->param('new_role')) {
    $new = trim($new);
    my $role = UserRole->new(name => $new, permissions => {});
    for my $perm ($c->permissions) {
        $role->permissions->{$perm} = !!$c->param( $role->slug . '_' . $perm );
    }
    $roles{ $new } = $role;
  }

  # 2. user -> role assignments
  $c->bucket->grants([]);
  for my $user ($c->users) {
    for my $role ( @{ $c->every_param( $user->username . '_roles' ) } ) {
        $c->bucket->add_grant( $user, $roles{$role});
    }
  }

  $c->flash(msg => "Saved changes");
  $c->redirect_to('manage_roles');
};

post '/create_user' => sub($c) {
  my $name = $c->param('name');
  $users{ $name } = User->new(username => $name);
  $c->flash(msg => "Added user $name");
  $c->redirect_to('manage_roles');
};

post '/create_bucket' => sub($c) {
  # TODO: more than just task order.
  my $number = trim($c->param('task_number')) or return $c->error('missing task number');
  my $type = trim($c->param('bucket_type')) or return $c->error('missing type');
  my $name = trim($c->param('name')) or return $c->error('missing name');
  my $id = $number;
  return "Task $id already exists" if exists($buckets{$id});
  my $b = TaskOrder->new(id => $id, type => $type, name => $name);
  $c->add_bucket($b);
  $c->select_bucket($id);
  $c->redirect_to('select_bucket');
};

app->start unless (caller and (caller eq 'main'));
